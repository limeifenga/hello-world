HTTP 协议
中文： 超文本传输协议
是用于从万维网 world wide web 服务器传输超文本到本地浏览器的传输协议

HTTP 是一个 基于 TCP/IP 通信协议来传递数据

HTTP 是一个属于应用层的面向对象的协议，由于其简捷、快速的方式、适应于分布式 超媒体 信息系统。
目前在www中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在规范化进行中。
而且 HTTP-NG 的建议已经提出

HTTP 协议工作于客户端-服务端架构之上。
浏览器作为HTTP客户端通过URL向HTTP服务器WEB服务器发送所有请求。Web服务器根据接收到请求后，
向客户端发送响应信息。

  http请求 - 响应模型
client -----请求---->  server
client <-----响应----  server

主要特点：
1、简单快速：客户端向服务器请求服务时，只需要传送请求方法和路径。请求方法常用的有
GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得
HTTP服务器的程序规模小因而通信速度很快。

2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type标记

3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，
即断开连接。采用这种方式可以节省传输时间。

4、无状态：HTTP协议是无状态协议。无状态是指协议对于事物处理没有记忆能力。


HTTP之URL
HTTP使用统一资源标识符来传输数据和建立连接。
URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址
URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息

一个完整的URL包括以下几部分：
http://www.aspxfans.com:8080/news/index.asp?boardID=5&ID=24618&page=1#name
1.协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，
如HTTP，FTP等等本例中使用的是HTTP协议。在"HTTP"后面的“//”为分隔符

2.域名部分：www.aspxfans.com

3.端口部分 8080

4.虚拟目录部分 从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分

5.文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，
如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，
那么从域名后的最后一个“/”开始到结束，都是文件名部分

6.锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”

7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。

URI和URL的区别

URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。
Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的
URI一般由三部组成：
①访问资源的命名机制
②存放资源的主机名
③资源自身的名称，由路径表示，着重强调于资源。

URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，
而且还指明了如何locate这个资源。

HTTP之请求消息Request

客户端发送一个HTTP请求到服务器的请求消息包括以下格式：

请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。

第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.
第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息
第三部分：空行，请求头部后面的空行是必须的
第四部分：请求数据也叫主体，可以添加任意的其他数据。

POST / HTTP1.1
Host:www.wrox.com
User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)
Content-Type:application/x-www-form-urlencoded
Content-Length:40
Connection: Keep-Alive

name=Professional%20Ajax&publisher=Wiley

第一部分：请求行，第一行明了是post请求，以及http1.1版本。
第二部分：请求头部，第二行至第六行。
第三部分：空行，第七行的空行。
第四部分：请求数据，第八行。

HTTP之响应消息Response
HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。

HTTP/1.1 200 OK
Date: Fri, 22 May 2009 06:07:21 GMT
Content-Type: text/html; charset=UTF-8

<html>
      <head></head>
      <body>
            <!--body goes here-->
      </body>
</html>

第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。
第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）
第二部分：消息报头，用来说明客户端要使用的一些附加信息
第二行和第三行为消息报头，
Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8
第三部分：空行，消息报头后面的空行是必须的
第四部分：响应正文，服务器返回给客户端的文本信息。

HTTP之状态码
状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:
1xx：指示信息--表示请求已接收，继续处理
2xx：成功--表示请求已被成功接收、理解、接受
3xx：重定向--要完成请求必须进行更进一步的操作
4xx：客户端错误--请求有语法错误或请求无法实现
5xx：服务器端错误--服务器未能实现合法的请求


HTTP1.1新增了五种请求方法：OPTIONS,PUT,DELETE,TRACE,CONNECT 方法。

GET     请求指定的页面信息，并返回实体主体。
HEAD    类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头

POST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。
POST请求可能会导致新的资源的建立和/或已有资源的修改。

PUT      从客户端向服务器传送的数据取代指定的文档的内容。

DELETE    请求服务器删除指定的页面。

CONNECT   HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。

OPTIONS   允许客户端查看服务器的性能。

TRACE     回显服务器收到的请求，主要用于测试或诊断。

----------------------HTTP工作原理
HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。
HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、
协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者
错误代码、服务器信息、响应头部和响应数据。

以下是 HTTP 请求/响应的步骤：

1、客户端连接到Web服务器
2、发送HTTP请求
3、服务器接受请求并返回HTTP响应
4、释放连接TCP连接
5、客户端浏览器解析HTML内容

例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：

1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;

2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;

3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;

4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;

5、释放 TCP连接;

6、浏览器将该 html 文本并显示内容; 　　


-------------------GET和POST请求的区别

GET:
GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变
HTTP协议没有对传输的数据大小进行限制;特定浏览器和服务器对URL长度有限制
因此对于GET提交时，传输数据就会受到URL长度的 限制。


POST:
POST提交：把提交的数据放置在是HTTP包的包体中
由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，
Apache、IIS6都有各自的配置。

安全性
POST的安全性要比GET的安全性高。比如：通过GET提交数据，用户名和密码将明文出现在URL上，
因为(1)登录页面有可能被浏览器缓存；(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，
除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击

GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。


Http get,post,soap协议都是在http上运行的

（1）get：请求参数是作为一个key/value对的序列（查询字符串）附加到URL上的

post：请求参数是在http标题的一个不同部分（名为entity body）传输的，这一部分用来传输表单信息，
因此必须将Content-type设置为:application/x-www-form- urlencoded。

soap：是http post的一个专用版本，遵循一种特殊的xml消息格式
Content-type设置为: text/xml 任何数据都可以xml化。